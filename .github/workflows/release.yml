name: Build & Release (all targets)

on:
  workflow_dispatch:
  push:
    tags:
      - "v*"

permissions:
  contents: write

jobs:
  build:
    name: Build on ${{ matrix.os }} (${{ matrix.target }})
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-22.04
            target: x86_64-unknown-linux-gnu
            archive: tar.gz
            build_keylogger: true
            rustflags: "-C target-cpu=native"
          - os: windows-2022
            target: x86_64-pc-windows-msvc
            archive: zip
            build_keylogger: false
            rustflags: "-C target-cpu=native"
          - os: macos-14
            target: aarch64-apple-darwin
            archive: tar.gz
            build_keylogger: false
            rustflags: ""  # <-- avoid -C target-cpu=native to keep ring happy

    env:
      CARGO_TERM_COLOR: always
      BIN1: nerc-keylogger            # Linux-only
      BIN2: nerc-keylogger-server     # Cross-platform

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install Linux system deps
        if: matrix.os == 'ubuntu-22.04'
        run: |
          sudo apt-get update
          sudo apt-get install -y pkg-config libx11-dev libxi-dev libxtst-dev

      - name: Verify X11 pkg-config
        if: matrix.os == 'ubuntu-22.04'
        run: |
          pkg-config --libs --cflags x11
          pkg-config --libs --cflags xi
          pkg-config --libs --cflags xtst

      - name: Install Rust (stable)
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: Cache build
        uses: Swatinem/rust-cache@v2
        with:
          key: "${{ matrix.target }}"
          workspaces: |
            .

      # -------- Build steps per OS to get shell/env expansion right --------

      - name: Build (Linux, bash)
        if: runner.os == 'Linux'
        shell: bash
        env:
          RUSTFLAGS: ${{ matrix.rustflags }}
        run: |
          set -eux
          if [[ "${{ matrix.build_keylogger }}" == "true" ]]; then
            cargo build --release --target ${{ matrix.target }} --bin "$BIN1"
          fi
          cargo build --release --target ${{ matrix.target }} --bin "$BIN2"

      - name: Build (macOS, bash)
        if: runner.os == 'macOS'
        shell: bash
        env:
          RUSTFLAGS: ${{ matrix.rustflags }}
        run: |
          set -eux
          if [[ "${{ matrix.build_keylogger }}" == "true" ]]; then
            cargo build --release --target ${{ matrix.target }} --bin "$BIN1"
          fi
          cargo build --release --target ${{ matrix.target }} --bin "$BIN2"

      - name: Build (Windows, PowerShell)
        if: runner.os == 'Windows'
        shell: pwsh
        env:
          RUSTFLAGS: ${{ matrix.rustflags }}
        run: |
          if ("${{ matrix.build_keylogger }}" -eq "true") {
            cargo build --release --target ${{ matrix.target }} --bin $env:BIN1
          }
          cargo build --release --target ${{ matrix.target }} --bin $env:BIN2

      - name: Prepare bundle
        shell: bash
        run: |
          set -eux
          OUTDIR="dist"
          mkdir -p "$OUTDIR"
          EXT=""
          if [[ "${{ runner.os }}" == "Windows" ]]; then EXT=".exe"; fi
          STAGE="artifacts-${{ matrix.target }}"
          mkdir -p "$STAGE"

          # Copy binaries if they exist
          [ -f "target/${{ matrix.target }}/release/${BIN1}${EXT}" ] && cp "target/${{ matrix.target }}/release/${BIN1}${EXT}" "$STAGE/"
          [ -f "target/${{ matrix.target }}/release/${BIN2}${EXT}" ] && cp "target/${{ matrix.target }}/release/${BIN2}${EXT}" "$STAGE/"

          [ -f README.md ] && cp README.md "$STAGE/"
          [ -f LICENSE ] && cp LICENSE "$STAGE/"

          if [[ "${{ matrix.archive }}" == "zip" ]]; then
            7z a "$OUTDIR/${STAGE}.zip" "./$STAGE/*" >/dev/null
          else
            tar -czf "$OUTDIR/${STAGE}.tar.gz" "$STAGE"
          fi
          ls -la "$OUTDIR"

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: artifacts-${{ matrix.target }}
          path: dist/*

  release:
    name: Create unified release
    needs: build
    if: startsWith(github.ref, 'refs/tags/')
    runs-on: ubuntu-22.04
    steps:
      - name: Download all build artifacts
        uses: actions/download-artifact@v4
        with:
          pattern: artifacts-*
          merge-multiple: true
          path: dist

      - name: List downloaded artifacts
        run: ls -la dist

      - name: Publish GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          files: dist/*
          fail_on_unmatched_files: true
          generate_release_notes: true

